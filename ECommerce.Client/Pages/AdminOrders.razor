@page "/adminOrders"
@inject IWishlistDataService WishlistDataService
@using ECommerce.Client.ViewModels
@using ECommerce.Client.Contracts
@using ECommerce.Client.Services

<div class="entity-table-container">
    <h1>Orders</h1>
    <table class="entity-table">
        <thead class="entity-table-head">
            <tr>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">Adress</th>
                <th scope="col">Phone Number</th>
                <th scope="col">Payment</th>
                <th scope="col">Price</th>
                <th scope="col">OrderStatus</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @* public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Address { get; set; }
        public string PhoneNumber { get; set; }
        public List<OrderItemViewModel> OrderItems { get; set; }
        public string Payment { get; set; }
        public decimal TotalPrice { get; set; } *@
            @foreach (var order in Orders)
            {
                <tr>
                    <td data-label="First Name">@order.FirstName</td>
                    <td data-label="LastName">@order.LastName</td>
                    <td data-label="Address">@order.Address</td>
                    <td data-label="PhoneNumber">@order.PhoneNumber</td>
                    <td data-label="Payment">@order.Payment</td>
                    <td data-label="Total Price">$@String.Format("{0:0.00}", order.TotalPrice)</td>
                    <td data-label="OrderStatus">@order.OrderStatus</td>
                    <td data-label="Actions">
                        <input type="text" @bind="order.OrderStatus" />
                        <button @onclick="() => UpdateOrderStatus(order) " class="action edit">☑️</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    private string status;
    string error { get; set; }

    [SupplyParameterFromForm] public OrderViewModel OrderModel { get; set; }

    private List<OrderViewModel> Orders = [];    

    [Inject] public IOrderService OrderService{ get; set; }    

    protected override async Task OnInitializedAsync()
    {
        OrderModel = new();       
        try
        {            
            Orders = (await OrderService.GetOrders()).ToList();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }
    private async Task UpdateOrderStatus(OrderViewModel order)
    {
        try
        {
            // Call the service to update OrderStatus           
            if (!string.IsNullOrEmpty(order.OrderStatus))
            {
                // Call your service to update OrderStatus using a PATCH request
                var response = await OrderService.UpdateOrderAsync(order, order.OrderStatus);

                // Check if the update was successful
                if (response.IsSuccess)
                {
                    // Optionally, you can show a success message
                    // Clear the OrderStatus after updating
                    order.OrderStatus = string.Empty;
                }
                else
                {
                    // Handle the case when the update fails
                    // You can display an error message or take appropriate action
                }
                
            }
            else
            {
                // Handle the case when OrderStatus is empty
                // You can display a validation message or take appropriate action
            }
            status = "";
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

}