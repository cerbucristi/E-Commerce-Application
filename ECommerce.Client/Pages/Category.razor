@page "/category"
@using ECommerce.Client.ViewModels
@using ECommerce.Client.Services
@using ECommerce.Client.Contracts
@using Microsoft.AspNetCore.Components.Authorization

<CascadingAuthenticationState>
    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        <Authorized>
            <div class="entity-list-container">
                <h1 class="entity-name">Categories</h1>

                <div class="entity-add-container">
                    <InputText class="entity-add"
                               placeholder="✍️ Add Category"
                               @bind-Value="@NewCategory.CategoryName"/>

                    <button class="entity-add-button" @onclick="HandleAddNewCategory">+</button>
                </div>
                <ul class="entity-list">
                    @foreach (var category in Categories)
                    {
                        <li class="entity-list-item">
                            @if (!category.IsEditing)
                            {
                                <p class="entity-list-item-name">@category.CategoryName</p>
                            }
                            else
                            {
                                <InputText class="entity-list-item-name input" @bind-Value="@category.EditedCategoryName"/>
                            }
                            <div class="">
                                @if (!category.IsEditing)
                                {
                                    <span class="" @onclick="() => StartEditingCategory(category)">✏️</span>
                                    <span class="" @onclick="() => HandleDeleteCategory(category)">❌</span>
                                }
                                else
                                {
                                    <span class="" @onclick="() => HandleUpdateCategoryAsync(category)">✅</span>
                                    <span class="" @onclick="() => StopEditingCategory(category)"></span>
                                }
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </Authorized>
        <NotAuthorized>
            <Login/>
        </NotAuthorized>
    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
</CascadingAuthenticationState>

@code {

    string error { get; set; }

    private List<CategoryViewModel> Categories = [];

    [SupplyParameterFromForm] private CategoryViewModel NewCategory { get; set; }

    [Inject] public ICategoryDataService CategoryDataService { get; set; }


    protected override void OnInitialized() => NewCategory = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Categories = (await CategoryDataService.GetCategoriesAsync()).ToList();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    private async void HandleAddNewCategory()
    {
        try
        {
            var result = await CategoryDataService.CreateCategoryAsync(NewCategory);
            NewCategory.CategoryId = result.Data.CategoryId;
            Categories.Add(NewCategory);
            NewCategory = new();
            StateHasChanged();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    private void StartEditingCategory(CategoryViewModel category)
    {
        category.IsEditing = true;
        category.EditedCategoryName = category.CategoryName;
    }
    
    private void StopEditingCategory(CategoryViewModel category)
    {
        category.IsEditing = false;
        category.EditedCategoryName = "";
    }
    
    private void CancelEditingCategory(CategoryViewModel category)
    {
        category.IsEditing = false;
    }

    private async Task HandleUpdateCategoryAsync(CategoryViewModel category)
    {
        try
        {
            category.CategoryName = category.EditedCategoryName;
            await CategoryDataService.UpdateCategoryAsync(category);
            category.IsEditing = false;

            Categories = (await CategoryDataService.GetCategoriesAsync()).ToList();
            StateHasChanged();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    private async void HandleDeleteCategory(CategoryViewModel category)
    {
        try
        {
            var response = await CategoryDataService.DeleteCategoryAsync(category);

            if (response.IsSuccess)
            {
                Categories.Remove(category);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

}