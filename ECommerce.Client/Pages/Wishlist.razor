@page "/wishlist"
@inject IWishlistDataService WishlistDataService
@inject IShoppingCartService ShoppingCartService
@inject GlobalStateService globalStateService
@using ECommerce.Client.ViewModels
@using ECommerce.Client.Services
@using ECommerce.Client.Contracts
@using Microsoft.AspNetCore.Components.Authorization

<div class="products-container">
    @foreach (var product in Products.Where(p => p.Wishlist))
    {
        <div class="product-container">
            <div class="wishlist-container" @onclick="() => ToggleWishlist(product.ProductId)">
                <span class="wishlist-tooltip"> Remove from wishlist </span>
                <span class="wishlist-icon">@GetHeartIcon(product.ProductId)</span>
            </div>

            <div class="product-image-container">
                <a class="add-to-cart-container">
                    <span class="add-to-cart-tooltip"> Add to cart </span>
                    <span @onclick="()=>AddToCart(product)" class="add-to-cart-icon"></span>
                </a>
                <img class="product-image" src=@product.ImageURL alt="">
            </div>

            <div class="product-description-container">
                <h3 class="product-name">@product.ProductName</h3>
                <p class="product-category">@product.CategoryName</p>
                <h4 class="product-price">$@product.Price</h4>
            </div>
        </div>
    }
</div>

@code {
    string error { get; set; }
    private List<ProductViewModel> Products = new List<ProductViewModel>();
    private int wishlistItemsCount = 0;

    [Inject]
    public IProductDataService ProductDataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadWishlistItemsCount();
        await LoadProducts();
    }

    private async Task LoadWishlistItemsCount()
    {
        var allProducts = await ProductDataService.GetProductsAsync();
        wishlistItemsCount = allProducts.Count(product => product.Wishlist);
    }

    private async Task LoadProducts()
    {
        try
        {
            var allProducts = await ProductDataService.GetProductsAsync();
            Products = allProducts.Where(p => p.Wishlist).ToList();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }


    private async void ToggleWishlist(Guid productId)
    {
        try
        {
            var product = Products.FirstOrDefault(p => p.ProductId == productId);

            if (product != null)
            {
                var isProductInWishlist = product.Wishlist;

                if (isProductInWishlist)
                {
                    await WishlistDataService.RemoveFromWishlistAsync(productId);
                }
                else
                {
                    await WishlistDataService.AddToWishlistAsync(productId);
                }

                await RefreshProducts();

                globalStateService.WishlistCountProperty = Products.Count(p => p.Wishlist);
            }
        }
        catch (Exception)
        {
        }
    }

    private async Task RefreshProducts()
    {
        try
        {
            var updatedProducts = await ProductDataService.GetProductsAsync();
            Products.Clear();
            Products.AddRange(updatedProducts.Where(p => p.Wishlist));
        }
        catch (Exception)
        {
        }
    }

    private string GetHeartIcon(Guid productId)
    {
        return "❤️";
    }

    private async Task AddToCart(ProductViewModel product)
    {
        CartItemViewModel cartItem = new CartItemViewModel
            {
                ProductId = product.ProductId,
                Quantity = 1,
                Price = product.Price,
                ProductName = product.ProductName,
                ProductCategory = product.CategoryName,
            };

        await ShoppingCartService.AddToCart(cartItem);
    }
}
